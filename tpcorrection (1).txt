ListeChainee* creer(){
    ListeChainee* Li= malloc(sizeof (ListeChainee));
    Li->premier=NULL;
    Li->taille=0;
    return Li;
}
void printf_Noeud(Noeud* noeud){
    if(noeud!=NULL) {
        //ListeChainee *Li = malloc(sizeof(ListeChainee));
        printf("La valeur est: %d", noeud->val);
        //noeud->suivant = Li->premier;
        printf("Pointeur %p", noeud->suivant);
    }
}
void afficher(ListeChainee* liste){
    Noeud* actuel;
    Noeud* suivant;
    if(liste!=NULL) {
        for(int i=0; i<liste->taille; i++){
            printf("Noeud courant: %p\n", actuel->suivant);
            actuel=actuel->suivant;
        }
    }
}
int vide(ListeChainee* liste){
    if(liste->taille==0){
        return 1;
    }
    return 0;
}
int inserer(ListeChainee * liste, int indice, int valeur){

    if (indice>liste->taille){
        return 2;
    }
    Noeud* noeud=malloc(sizeof(Noeud));
    noeud->val  =valeur;
    noeud->suivant=NULL;
    if (liste->taille==0){
        liste->premier=noeud;
    }
    if(indice==0){
        noeud->suivant=liste->premier;
        liste->premier=noeud;
    }
    else{
        Noeud* temp=liste->premier;
        for (int i = 0; i < indice-1; ++i) {
            temp=temp->suivant;
        }
        noeud->suivant=temp->suivant;
        temp->suivant=noeud;

    }
    liste->taille++;

}
int recuperer(ListeChainee * liste, int indice){
    if (indice>liste->taille){
        return 2;
    }
    Noeud* temp=liste->premier;
    for (int i = 0; i < indice; ++i) {
        temp=temp->suivant;
    }
    printf("La valeur est %d\n",temp->val);
    return temp->val;

}
int supprimer(ListeChainee * liste, int indice){
    if (indice>liste->taille){
        return 2;
    }
    Noeud* c;
    if (indice==0){
        c=liste->premier;
        liste->premier=liste->premier->suivant;
        free(c);
    }
    else{
        Noeud* temp=liste->premier;
        for (int i = 0; i < indice-1; ++i) {
            temp=temp->suivant;
        }
        c=temp->suivant;
        temp->suivant=temp->suivant->suivant;
        free(c);
    }
    liste->taille--;
    return 0;



}
void detruire(ListeChainee* liste){
    for(int i=0; i<liste->taille; i++){
        supprimer(liste, liste->taille);
    }
    free(liste);
    printf("La liste est vide\n");
}